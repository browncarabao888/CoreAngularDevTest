// <auto-generated />
using System;
using CoreAngularDevTest.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoreAngularDevTest.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250613124929_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.AddressComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Long_name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ResultId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Short_name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("AddressComponent");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Bounds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("northeastId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("southwestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("northeastId");

                    b.HasIndex("southwestId");

                    b.ToTable("Bounds");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Geometry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoundsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location_type")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BoundsId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ViewportId");

                    b.ToTable("Geometry");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("lat")
                        .HasColumnType("REAL");

                    b.Property<double>("lng")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.LocationGeoInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("locationGeoInfo");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Northeast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("lat")
                        .HasColumnType("REAL");

                    b.Property<double>("lng")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Northeast");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationGeoInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("formatted_address")
                        .HasColumnType("TEXT");

                    b.Property<int>("geometryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("place_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("types")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationGeoInfoId");

                    b.HasIndex("geometryId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Southwest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("lat")
                        .HasColumnType("REAL");

                    b.Property<double>("lng")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Southwest");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Viewport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("northeastId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("southwestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("northeastId");

                    b.HasIndex("southwestId");

                    b.ToTable("Viewport");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.AddressComponent", b =>
                {
                    b.HasOne("CoreAngularDevTest.Server.Models.Result", null)
                        .WithMany("address_components")
                        .HasForeignKey("ResultId");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Bounds", b =>
                {
                    b.HasOne("CoreAngularDevTest.Server.Models.Northeast", "northeast")
                        .WithMany()
                        .HasForeignKey("northeastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAngularDevTest.Server.Models.Southwest", "southwest")
                        .WithMany()
                        .HasForeignKey("southwestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("northeast");

                    b.Navigation("southwest");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Geometry", b =>
                {
                    b.HasOne("CoreAngularDevTest.Server.Models.Bounds", "Bounds")
                        .WithMany()
                        .HasForeignKey("BoundsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAngularDevTest.Server.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAngularDevTest.Server.Models.Viewport", "Viewport")
                        .WithMany()
                        .HasForeignKey("ViewportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bounds");

                    b.Navigation("Location");

                    b.Navigation("Viewport");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Result", b =>
                {
                    b.HasOne("CoreAngularDevTest.Server.Models.LocationGeoInfo", null)
                        .WithMany("Results")
                        .HasForeignKey("LocationGeoInfoId");

                    b.HasOne("CoreAngularDevTest.Server.Models.Geometry", "geometry")
                        .WithMany()
                        .HasForeignKey("geometryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("geometry");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Viewport", b =>
                {
                    b.HasOne("CoreAngularDevTest.Server.Models.Northeast", "northeast")
                        .WithMany()
                        .HasForeignKey("northeastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAngularDevTest.Server.Models.Southwest", "southwest")
                        .WithMany()
                        .HasForeignKey("southwestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("northeast");

                    b.Navigation("southwest");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.LocationGeoInfo", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("CoreAngularDevTest.Server.Models.Result", b =>
                {
                    b.Navigation("address_components");
                });
#pragma warning restore 612, 618
        }
    }
}
